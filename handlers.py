from aiogram import Router, F, Bot
from aiogram.methods.send_photo import SendPhoto as send_photo
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
import sql as sql
import random

import keyboards as kb
from config import TOKEN
bot = Bot(token=TOKEN)

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):

    await sql.db_start()

    user_info = await sql.get_user_info(message.from_user.id)
    if user_info == None:
        await sql.create_user(user_id=message.from_user.id, username=message.from_user.username)
        await message.answer_photo(photo='AgACAgIAAxkBAAMKZ9mtuZ6ewn22HTCdL_obKn5ReUAAAp7rMRvndtFKtk5eG0M3Id8BAAMCAANzAAM2BA', caption=kb.main_text, reply_markup=kb.main, parse_mode='html')
    else:
        await sql.create_user(user_id=message.from_user.id, username=message.from_user.username)
        await message.answer_photo(photo = 'AgACAgIAAxkBAAMKZ9mtuZ6ewn22HTCdL_obKn5ReUAAAp7rMRvndtFKtk5eG0M3Id8BAAMCAANzAAM2BA', caption=kb.main_text_olduser, reply_markup=kb.main_olduser, parse_mode='html')

@router.message(F.photo)
async def handle_files(message: Message):
    if message.from_user.id == 600335172 or message.from_user.id == 1370964537:
        await message.answer(text = message.photo[0].file_id)
    else:
        await message.answer(text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª')

@router.message(F.audio)
async def handle_files(message: Message):
    if message.from_user.id == 600335172 or message.from_user.id == 1370964537:
        await message.answer(text = message.audio.file_id)
    else:
        await message.answer(text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª')

@router.message(F.video)
async def handle_files(message: Message):
    if message.from_user.id == 600335172 or message.from_user.id == 1370964537:
        await message.answer(text = message.video.file_id)
    else:
        await message.answer(text='–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª')



@router.message()
async def main_func(message: Message):
    #user_channel_status = await bot.get_chat_member(chat_id=-1001991921457, user_id=message.from_user.id)
    user_channel_status = 'ok'
    if user_channel_status != 'left':
        async def health(ui, pl):
            global stat

            health_bar = int(ui[5]) + int(pl[7])
            await sql.health_change(health_bar, ui)
            return health_bar

        restext = message.text
        user_info = await sql.get_user_info(message.from_user.id)
        stat = user_info[2]

        plots_info = await sql.get_plots_info(stat)

        if user_info[3] == 'yes':
            stat = await sql.stat_change(user_id=message.from_user.id, stat=stat, plot=plots_info, restext=restext)
            await sql.update_stat_to_change(user_id=message.from_user.id, stat_TC='no')
            plots_info = await sql.get_plots_info(stat)


        if plots_info[9] == 'fight: cy-e-fa':
            if user_info[9] == 'null':
                rules = '–ß—Ç–æ–±—ã –ø–æ–±–µ–¥–∏—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å 3 —Ä–∞–∑–∞ –≤ –∫–∞–º–µ—Ä–Ω—å-–Ω–æ–∂–Ω–∏—Ü—ã-–±—É–º–∞–≥—É'
                await message.answer(rules, parse_mode='html')
                rnd1 = '–†–∞—É–Ω–¥ 1: –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É'
                await sql.game_stat_change(user_info[0],'knb!1!0:0')
                await message.answer(rnd1, reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text='üóø'), KeyboardButton(text='‚úÇÔ∏è'), KeyboardButton(text='‚¨úÔ∏è')]]), parse_mode='html')
            else:
                random_number_knb = random.randint(0, 2)
                knm_dict = {0:'üóø', 1:'‚úÇÔ∏è', 2: '‚¨úÔ∏è'}
                knn_ans = knm_dict[random_number_knb]
                gamknb = user_info[9].split('!')

                if restext == knn_ans:
                    await message.answer(f'–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã–±—Ä–∞–ª: {knn_ans}\n\n–ù–∏—á—å—è! –ï—â–µ —Ä–∞–∑', parse_mode='html')
                    schet_2 = gamknb[2]
                elif restext == 'üóø' and random_number_knb == 1 or restext == '‚úÇÔ∏è' and random_number_knb == 2 or restext == '‚¨úÔ∏è' and random_number_knb == 0:
                    schet = gamknb[2].split(":")
                    schet_2 = f'{int(schet[0])+1}:{schet[1]}'
                    await sql.game_stat_change(user_info[0], '!'.join(['knb', str(int(gamknb[1])+1), schet_2]))

                    if '3' not in schet_2:
                        await message.answer(f'–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã–±—Ä–∞–ª: {knn_ans}\n\n–ü–æ–±–µ–¥–∞!!\n\n–°—á—ë—Ç: {schet_2}\n\n–†–∞—É–Ω–¥ {int(gamknb[1])+1}: –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É',reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text='üóø'), KeyboardButton(text='‚úÇÔ∏è'), KeyboardButton(text='‚¨úÔ∏è')]]), parse_mode='html')
                else:
                    schet = gamknb[2].split(":")
                    schet_2 = f'{schet[0]}:{int(schet[1])+1}'


                    await sql.game_stat_change(user_info[0], '!'.join(['knb', str(int(gamknb[1])+1), schet_2]))

                    if '3' not in schet_2:
                        await message.answer(f'–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã–±—Ä–∞–ª: {knn_ans}\n\n–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!!\n\n–°—á—ë—Ç: {schet_2}\n\n–†–∞—É–Ω–¥ {int(gamknb[1])+1}: –í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ñ–∏–≥—É—Ä—É',reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text='üóø'), KeyboardButton(text='‚úÇÔ∏è'), KeyboardButton(text='‚¨úÔ∏è')]]), parse_mode='html')

                if '3' in schet_2:
                    await sql.game_stat_change(user_info[0], 'null')
                    if schet_2[0] == '3':
                        await message.answer(
                            f'–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã–±—Ä–∞–ª: {knn_ans}\n\n–ü–æ–±–µ–¥–∞!!\n\n–°—á—ë—Ç: {schet_2} - –ü–æ–±–µ–¥–∞ –≤ –∏–≥—Ä–µ!!\n\n',
                            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
                                [KeyboardButton(text='—É—Ä–∞–∞–∞')]]),
                            parse_mode='html')

                        stat = await sql.stat_change(user_id=message.from_user.id, stat=stat, plot=plots_info, restext='–ø–æ–±–µ–¥–∞')
                    else:
                        await message.answer(
                            f'–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤—ã–±—Ä–∞–ª: {knn_ans}\n\n–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!!\n\n–°—á—ë—Ç: {schet_2} - –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ\n\n',
                            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
                                [KeyboardButton(text='–∂–∞–ª—å')]]),
                            parse_mode='html')
                        stat = await sql.stat_change(user_id=message.from_user.id, stat=stat, plot=plots_info,
                                                     restext='–ø–æ—Ä–∞–∂–µ–Ω–∏–µ')

        else:
            plots_info = await sql.get_plots_info(stat)
            health_bar = await health(user_info, plots_info)
            if plots_info[9] == 'start':
                await sql.start_plot(user_info, plots_info)
            else:
                await health(user_info, plots_info)
            await kb.send_message(user_info=user_info, message_user_id=message.from_user.id, plots_info=plots_info, message=message, health_bar=health_bar)

            if health_bar < 1:
                random_number = random.randint(0, 5)
                if random_number == 0:
                    await message.answer('–ü—Ä–æ—Å—Ç–∏, –ø—É–ø—Å–∏–∫, –Ω–æ —Ç—ã —É–º–µ—Ä', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,keyboard=[[KeyboardButton(text='–ñ–∞–ª—å-–∂–∞–ª—å')]]))
                elif random_number == 1:

                    await message.answer_photo(photo='AgACAgIAAxkBAAINwmV7Oh2y3PYLvmz_iXsFAAE6ZzYcGQACht0xG7vy4UtjI-EBZ8B5vAEAAwIAA3MAAzME', caption='–ü—Ä–æ—Å—Ç–∏, –ø—É–ø—Å–∏–∫, –Ω–æ —Ç—ã —É–º–µ—Ä', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[KeyboardButton(text='–°–≤–µ—Ç–ª–∞—è –ø–∞–º—è—Ç—å')]]), parse_mode='html')
                elif random_number == 2:
                    await message.answer_photo(photo='AgACAgIAAxkBAAINxGV7OsSdlVVmDvxVSvCnwcNsO6icAAKO3TEbu_LhS2SCEjghpxh_AQADAgADcwADMwQ', caption='–ü—Ä–æ—Å—Ç–∏, –ø—É–ø—Å–∏–∫, –Ω–æ —Ç—ã —É–º–µ—Ä', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,keyboard=[[KeyboardButton(text='–°–≤–µ—Ç–ª–∞—è –ø–∞–º—è—Ç—å')]]), parse_mode='html')
                elif random_number == 3:
                    await message.answer_photo(photo='AgACAgIAAxkBAAINxmV7OymIkXG9ntEtcVJ8wkdneH3zAAKW3TEbu_LhS8P_A9IiYTFxAQADAgADcwADMwQ', caption='–ü—Ä–æ—Å—Ç–∏, –ø—É–ø—Å–∏–∫, –Ω–æ —Ç—ã —É–º–µ—Ä',
                                               reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,keyboard=[[KeyboardButton(text='–ú–µ—Ä—Ç–≤(–∞), –Ω–æ –Ω–µ —Å–ª–æ–º–ª–µ–Ω(–∞)')]]), parse_mode='html')
                elif random_number == 4:
                    await message.answer_photo(photo='AgACAgIAAxkBAAINyGV7O5TJDomk02Xp1etlkQPMpgUXAAKk3TEbu_LhS621qgYF_9JwAQADAgADcwADMwQ', caption='–ü—Ä–æ—Å—Ç–∏, –ø—É–ø—Å–∏–∫, –Ω–æ —Ç—ã —É–º–µ—Ä',
                                               reply_markup=ReplyKeyboardMarkup(resize_keyboard=True,keyboard=[[KeyboardButton(text='RIP')]]), parse_mode='html')



                await sql.stat_change_dead(user_id=user_info, plot=plots_info)
    else:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",
            url="https://t.me/+JA8oHnooWzllMTIy")
        )
        await message.answer(
            "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à —Ç–≥–∫ üëâüëàü•∫ü•∫ü•∫  \n\n–≠—Ç–æ –Ω–µ —Ä–µ–∫–ª–∞–º–∞ –∏ –º—ã –Ω–µ –±—É–¥–µ–º –∑–∞—Å–æ—Ä—è—Ç—å —Ç–≤–æ—é —Ç–≥—à–∫—É - –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —Ç—ã –±—É–¥–µ—à—å –∑–Ω–∞—Ç—å –≤—Å–µ –æ –¥–µ–ª–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞, –∞ —Ç–∞–∫–∂–µ –∏–Ω–æ–≥–¥–∞ —Ö–∏—Ö–∏–∫–∞—Ç—å —Å —à—É—Ç–æ—á–µ–∫. \n–ó–∞—Ä–∞–Ω–µ–µ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º\n\nP.S. –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ü•≥ü•≥ –∏ –ø—Ä–æ–ø–∞–ª–∏ –∫–Ω–æ–ø–∫–∏, —Ç–æ –∏—Ö –º–æ–∂–Ω–æ –∏—Ö –≤–µ—Ä–Ω—É—Ç—å —á–µ—Ä–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ —Å –∫—Ä—É–∂–æ—á–∫–∞–º–∏ –≤–Ω–∏–∑—É",
            reply_markup=builder.as_markup()
        )
